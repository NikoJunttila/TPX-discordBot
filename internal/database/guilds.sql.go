// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: guilds.sql

package database

import (
	"context"
	"time"
)

const createGuild = `-- name: CreateGuild :one
INSERT INTO guildCount(id,created_at,updated_at,count)
VALUES(?,?,?,?)
RETURNING id, created_at, updated_at, count
`

type CreateGuildParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	Count     int64
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) (GuildCount, error) {
	row := q.db.QueryRowContext(ctx, createGuild,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Count,
	)
	var i GuildCount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Count,
	)
	return i, err
}

const getGuild = `-- name: GetGuild :one
Select id, created_at, updated_at, count FROM guildCount WHERE id = ?
`

func (q *Queries) GetGuild(ctx context.Context, id string) (GuildCount, error) {
	row := q.db.QueryRowContext(ctx, getGuild, id)
	var i GuildCount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Count,
	)
	return i, err
}

const highscoreGuild = `-- name: HighscoreGuild :many
SELECT id, created_at, updated_at, count
FROM guildCount
ORDER BY count DESC
LIMIT 5
`

func (q *Queries) HighscoreGuild(ctx context.Context) ([]GuildCount, error) {
	rows, err := q.db.QueryContext(ctx, highscoreGuild)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GuildCount
	for rows.Next() {
		var i GuildCount
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGuild = `-- name: UpdateGuild :exec
UPDATE guildCount
  set count = count + ?
WHERE id = ?
`

type UpdateGuildParams struct {
	Count int64
	ID    string
}

func (q *Queries) UpdateGuild(ctx context.Context, arg UpdateGuildParams) error {
	_, err := q.db.ExecContext(ctx, updateGuild, arg.Count, arg.ID)
	return err
}
