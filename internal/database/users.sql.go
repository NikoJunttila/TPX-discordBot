// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO usersCount(id,created_at,updated_at,count)
VALUES(?,?,?,?)
RETURNING id, created_at, updated_at, count
`

type CreateUserParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	Count     int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UsersCount, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Count,
	)
	var i UsersCount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Count,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
Select id, created_at, updated_at, count FROM usersCount WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (UsersCount, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i UsersCount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Count,
	)
	return i, err
}

const highscoreUsers = `-- name: HighscoreUsers :many
SELECT id, created_at, updated_at, count
FROM usersCount
ORDER BY count DESC
LIMIT 5
`

func (q *Queries) HighscoreUsers(ctx context.Context) ([]UsersCount, error) {
	rows, err := q.db.QueryContext(ctx, highscoreUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersCount
	for rows.Next() {
		var i UsersCount
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE usersCount
  set count = count + ?
WHERE id = ?
`

type UpdateUserParams struct {
	Count int64
	ID    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Count, arg.ID)
	return err
}
